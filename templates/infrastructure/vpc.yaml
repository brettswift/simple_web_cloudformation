---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
    VPC with 3 subnets across 3 Availability Zones.
Parameters:
  CorporateCidrIp:
    Description: Your Company's CidrIp (to restrict traffic to be authorized ONLY
      from corporate office)
    Type: String
    Default: 0.0.0.0/0
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  NetworkName:
      Description: A name that will be prefixed to network resource names
      Type: String
      Default: MyNetwork
  EnvType:
    Description: Environment type.
    Type: String
    AllowedValues:
      - prod
      - test
  SubnetCount:
    Description: The number of subnets to deploy.
    Type: Number
    MinValue: 1
    MaxValue: 3
Conditions:
  CreateSubnetThree: !Equals [ !Ref SubnetCount, 3 ]
  CreateSubnetTwo: #create if count is 2 or 3
    !Or [!Equals [ !Ref SubnetCount, 2 ], Condition: CreateSubnetThree ]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      Tags:
      - Key: Name
        Value: !Sub ${NetworkName}
      - Key: builtby
        Value: cloudformation
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${NetworkName}
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${ClassB}.0.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${NetworkName} Subnet Public A
  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnetTwo
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${ClassB}.20.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${NetworkName} Subnet Public B
  SubnetPublicC:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnetThree
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${ClassB}.40.0/24'
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${NetworkName} Subnet Public C
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${ClassB}.10.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NetworkName} Subnet Private A
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnetTwo
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${ClassB}.30.0/24'
      AvailabilityZone:  !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NetworkName} Subnet Private B
  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnetThree
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${ClassB}.50.0/24'
      AvailabilityZone:  !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NetworkName} Subnet Private C
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableA
  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Condition: CreateSubnetTwo
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableB
  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Condition: CreateSubnetTwo
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Condition: CreateSubnetThree
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableC
  DefaultPrivateRouteC:
    Type: AWS::EC2::Route
    Condition: CreateSubnetThree
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnetTwo
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnetThree
    Properties:
      SubnetId: !Ref SubnetPublicC
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnetTwo
    Properties:
      SubnetId: !Ref SubnetPrivateB
      RouteTableId: !Ref PrivateRouteTableB
  PrivateSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnetThree
    Properties:
      SubnetId: !Ref SubnetPrivateC
      RouteTableId: !Ref PrivateRouteTableC
  PublicSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicSubnetAcl
  PrivateSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnetAcl
  PublicInSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: '32000'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock:
        Ref: CorporateCidrIp
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '1'
        To: '65535'
  PublicOutSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: '32000'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '1'
        To: '65535'
  PrivateInSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: '32001'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock:
        Ref: CorporateCidrIp
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '1'
        To: '65535'
  PrivateOutSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: '32001'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '1'
        To: '65535'
  PublicSubnetAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      NetworkAclId: !Ref PublicSubnetAcl
  PublicSubnetAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: CreateSubnetTwo
    Properties:
      SubnetId: !Ref SubnetPublicB
      NetworkAclId: !Ref PublicSubnetAcl
  PublicSubnetAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: CreateSubnetThree
    Properties:
      SubnetId: !Ref SubnetPublicC
      NetworkAclId: !Ref PublicSubnetAcl
  PrivateSubnetAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      NetworkAclId: !Ref PrivateSubnetAcl
  PrivateSubnetAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: CreateSubnetTwo
    Properties:
      SubnetId: !Ref SubnetPrivateB
      NetworkAclId: !Ref PrivateSubnetAcl
  PrivateSubnetAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: CreateSubnetThree
    Properties:
      SubnetId: !Ref SubnetPrivateC
      NetworkAclId: !Ref PrivateSubnetAcl
  NatGatewayEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGatewayEIPB:
    Type: AWS::EC2::EIP
    Condition: CreateSubnetTwo
    Properties:
      Domain: vpc
  NatGatewayEIPC:
    Type: AWS::EC2::EIP
    Condition: CreateSubnetThree
    Properties:
      Domain: vpc
  NatGatewayA:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIPA.AllocationId
      SubnetId: !Ref SubnetPublicA
  NatGatewayB:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Condition: CreateSubnetTwo
    Properties:
      AllocationId: !GetAtt NatGatewayEIPB.AllocationId
      SubnetId: !Ref SubnetPublicB
  NatGatewayC:
    DependsOn: AttachGateway
    Condition: CreateSubnetThree
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIPC.AllocationId
      SubnetId: !Ref SubnetPublicC
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NAT Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: '1'
        ToPort: '65535'
        SourceSecurityGroupId: !Ref PrivateSG
      - IpProtocol: icmp
        FromPort: "-1"
        ToPort: "-1"
        SourceSecurityGroupId: !Ref PrivateSG
  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Servers in the Private Subnets
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp:
          Ref: CorporateCidrIp
      Tags:
        - Key: Name
          Value: MachineAccess
  WebAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access Web Ports
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp:
          Ref: CorporateCidrIp
      Tags:
        - Key: Name
          Value: WebAccess
Outputs:
  VPC:
    Description: VPC
    Value:
      Ref: VPC
  # PublicSubnets: # can't do this with conditionally built subnets
  #   Description: Public Subnets
  #   Value:
  #     Fn::Join:
  #     - ','
  #     - - Ref: SubnetPublicA
  #       - Ref: SubnetPublicB
  #       - Ref: SubnetPublicC
  #   Export:
  #     Name: !Sub "${AWS::StackName}-PublicSubnets"
  # PrivateSubnets:
  #   Description: Private Subnets
  #   Value:
  #     Fn::Join:
  #     - ','
  #     - - Ref: SubnetPrivateA
  #       - Ref: SubnetPrivateB
  #       - Ref: SubnetPrivateC
  #   Export:
  #     Name: !Sub "${AWS::StackName}-PrivateSubnets"
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  AccessSecurityGroup: #TODO: pull this into a nested stack
    Description: The security group ID to used for OS access
    Value: !GetAtt PrivateSG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AccessSecurityGroupId"
  WebAccessSecurityGroup:
    Description: The security group ID to used for OS access
    Value: !GetAtt WebAccessSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-WebAccessSecurityGroupId"
  SubnetPublicA:
    Description: 'Subnet A public.'
    Value: !Ref SubnetPublicA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicA'
  SubnetPrivateA:
    Description: 'Subnet A private.'
    Value: !Ref SubnetPrivateA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateA'
  SubnetPublicB:
    Description: 'Subnet B public.'
    Value: !Ref SubnetPublicB
    Condition: CreateSubnetTwo
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicB'
  SubnetPrivateB:
    Description: 'Subnet B private.'
    Value: !Ref SubnetPrivateB
    Condition: CreateSubnetTwo
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateB'
  SubnetPublicC:
    Description: 'Subnet C public.'
    Condition: CreateSubnetThree
    Value: !Ref SubnetPublicC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicC'
  SubnetPrivateC:
    Description: 'Subnet C private.'
    Condition: CreateSubnetThree
    Value: !Ref SubnetPrivateC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateC'
