---
AWSTemplateFormatVersion: '2010-09-09'
Description: simple web auto scaling group
Parameters:
  VpcStackName:
    Description: Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in this
      stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: MainVpc
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-a41a3fb3
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-caf253aa
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-00347e60
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-f9dd458a
      HVMG2: ami-e2f7bd91
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-886369ec
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-ea26ce85
      HVMG2: ami-d2ff04bd
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-374db956
      HVMG2: ami-4c78d52d
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-a59b49c6
      HVMG2: ami-f3f95990
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-dc361ebf
      HVMG2: ami-3a122e59
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-ffbdd790
      HVMG2: ami-21a7d34e
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-730ebd17
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED
Resources:
  # eipSimpleWeb: # Remove? not assigned anywhere yet?
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  asgAutoScaleSimpleWebServer:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs '' #VPC must enable subnets in all zones
      Cooldown: '120'
      DesiredCapacity: '0'
      HealthCheckGracePeriod: '300'
      HealthCheckType: EC2
      MaxSize: '3'
      MinSize: '0'
      TargetGroupARNs:
      - albSimpleWebAppLoadBalancer
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${VpcStackName}-SubnetPublicA"
      - Fn::ImportValue: !Sub "${VpcStackName}-SubnetPublicB"
      - Fn::ImportValue: !Sub "${VpcStackName}-SubnetPublicC"
      LaunchConfigurationName:
        Ref: lcSimpleWeb
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupTerminatingInstances
        - GroupInServiceInstances
        - GroupMaxSize
        - GroupDesiredCapacity
        - GroupTotalInstances
        - GroupMinSize
        - GroupStandbyInstances
        - GroupPendingInstances
      TerminationPolicies:
      - Default
  lcSimpleWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              stress: [] #TODO redundant b/c of user data.  Test this syntax.
          # services:
          #   sysvinit:
          #     httpd:
          #       enabled: 'true'
          #       ensureRunning: 'true'
          #     #TODO: make use of service restarts on stack updates.
          #     cfn-hup: #allows changes on update stack
          #       enabled: 'true'
          #       ensureRunning: 'true'
          #       files:
          #       - "/etc/cfn/cfn-hup.conf"
          #       - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      KeyName: !Sub "${KeyName}"
      AssociatePublicIpAddress: true
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      SecurityGroups: #groupName & subnet can't be used together.  How we do this?
      - Ref: sgInstanceSecurityGroup #TODO add VPC security groups
      InstanceType: !Ref InstanceType
      InstanceMonitoring: 'true'
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "yum update -y aws-cfn-bootstrap\n"
            - "mkdir /var/simpleweb\n"
            - "cd /var/simpleweb\n"
            - "nohup python -m SimpleHTTPServer 8000 & 2>&1\n"
            - "echo \"hello from `dig +short myip.opendns.com @resolver1.opendns.com`\" "
            - "  > /var/simpleweb/index.html\n"
            - "echo 'healthy' > /var/simpleweb/health.html\n"
            - "yum install stress -y\n"
            - "nohup stress --cpu 2 --timeout 600 & 2>&1\n"
            - "\n"
  snsCloudWatchCPU:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CloudWatchVPC_CPU
      # Subscription:
      # - Endpoint: brettswift@gmail.com
      #   Protocol: email
  albSimpleWebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Fn::ImportValue: !Sub "${VpcStackName}-SubnetPublicA"
      - Fn::ImportValue: !Sub "${VpcStackName}-SubnetPublicB"
      - Fn::ImportValue: !Sub "${VpcStackName}-SubnetPublicC"
      SecurityGroups: #import web access security group from the VPC
      - Fn::ImportValue: !Sub "${VpcStackName}-WebAccessSecurityGroupId"
  lblSimpleWebLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: tgSimpleWebTarget
      LoadBalancerArn:
        Ref: albSimpleWebAppLoadBalancer
      Port: 80
      Protocol: HTTP
  tgSimpleWebTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tgSimpleWebTarget
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 2
      HealthCheckPath: /
      Port: 8000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
    DependsOn:
    - albSimpleWebAppLoadBalancer
  sgInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
  sgiIngressSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: sgInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  sgiIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: sgInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: '8000'
      ToPort: '8000'
      CidrIp: 0.0.0.0/0
  sgeEgressInternet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Ref: sgInstanceSecurityGroup
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0
  snspolicyCloudWatchVPCCPU:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - Ref: snsCloudWatchCPU
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource:
            Ref: snsCloudWatchCPU
          Condition:
            StringEquals:
              AWS:SourceOwner: '845689384714'
  scalingDecreaseGroupSize:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      AutoScalingGroupName:
        Ref: asgAutoScaleSimpleWebServer
  scalingIncreaseGroupSize:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      Cooldown: '60'
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      AutoScalingGroupName:
        Ref: asgAutoScaleSimpleWebServer
  alarmCPUaboveThreshold:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: 'true'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '30.0'
      AlarmActions:
      - Ref: scalingIncreaseGroupSize
      Dimensions:
      - Name: AutoScalingGroupName
        Value: Auto Scale Simple Web Server
  alarmCPUbelowThreshold:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: 'true'
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: '2'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '300'
      Statistic: Average
      Threshold: '20.0'
      AlarmActions:
      - arn:aws:sns:us-west-2:845689384714:CloudWatchVPC_CPU
      - Ref: scalingDecreaseGroupSize
      Dimensions:
      - Name: AutoScalingGroupName
        Value: Auto Scale Simple Web Server
Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - !GetAtt albSimpleWebAppLoadBalancer.DNSName
